// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: consumer_limit.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsumerLimitService_GetAllConsumerLimits_FullMethodName = "/xyz_grpc.ConsumerLimitService/GetAllConsumerLimits"
	ConsumerLimitService_GetConsumerLimitById_FullMethodName = "/xyz_grpc.ConsumerLimitService/GetConsumerLimitById"
	ConsumerLimitService_CreateConsumerLimit_FullMethodName  = "/xyz_grpc.ConsumerLimitService/CreateConsumerLimit"
	ConsumerLimitService_UpdateConsumerLimit_FullMethodName  = "/xyz_grpc.ConsumerLimitService/UpdateConsumerLimit"
	ConsumerLimitService_DeleteConsumerLimit_FullMethodName  = "/xyz_grpc.ConsumerLimitService/DeleteConsumerLimit"
)

// ConsumerLimitServiceClient is the client API for ConsumerLimitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerLimitServiceClient interface {
	GetAllConsumerLimits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConsumerLimitListResponse, error)
	GetConsumerLimitById(ctx context.Context, in *ConsumerLimitIdRequest, opts ...grpc.CallOption) (*ConsumerLimitResponse, error)
	CreateConsumerLimit(ctx context.Context, in *ConsumerLimit, opts ...grpc.CallOption) (*ConsumerLimitResponse, error)
	UpdateConsumerLimit(ctx context.Context, in *ConsumerLimit, opts ...grpc.CallOption) (*ConsumerLimitResponse, error)
	DeleteConsumerLimit(ctx context.Context, in *ConsumerLimitIdRequest, opts ...grpc.CallOption) (*ConsumerLimitResponse, error)
}

type consumerLimitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerLimitServiceClient(cc grpc.ClientConnInterface) ConsumerLimitServiceClient {
	return &consumerLimitServiceClient{cc}
}

func (c *consumerLimitServiceClient) GetAllConsumerLimits(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConsumerLimitListResponse, error) {
	out := new(ConsumerLimitListResponse)
	err := c.cc.Invoke(ctx, ConsumerLimitService_GetAllConsumerLimits_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerLimitServiceClient) GetConsumerLimitById(ctx context.Context, in *ConsumerLimitIdRequest, opts ...grpc.CallOption) (*ConsumerLimitResponse, error) {
	out := new(ConsumerLimitResponse)
	err := c.cc.Invoke(ctx, ConsumerLimitService_GetConsumerLimitById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerLimitServiceClient) CreateConsumerLimit(ctx context.Context, in *ConsumerLimit, opts ...grpc.CallOption) (*ConsumerLimitResponse, error) {
	out := new(ConsumerLimitResponse)
	err := c.cc.Invoke(ctx, ConsumerLimitService_CreateConsumerLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerLimitServiceClient) UpdateConsumerLimit(ctx context.Context, in *ConsumerLimit, opts ...grpc.CallOption) (*ConsumerLimitResponse, error) {
	out := new(ConsumerLimitResponse)
	err := c.cc.Invoke(ctx, ConsumerLimitService_UpdateConsumerLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerLimitServiceClient) DeleteConsumerLimit(ctx context.Context, in *ConsumerLimitIdRequest, opts ...grpc.CallOption) (*ConsumerLimitResponse, error) {
	out := new(ConsumerLimitResponse)
	err := c.cc.Invoke(ctx, ConsumerLimitService_DeleteConsumerLimit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerLimitServiceServer is the server API for ConsumerLimitService service.
// All implementations must embed UnimplementedConsumerLimitServiceServer
// for forward compatibility
type ConsumerLimitServiceServer interface {
	GetAllConsumerLimits(context.Context, *emptypb.Empty) (*ConsumerLimitListResponse, error)
	GetConsumerLimitById(context.Context, *ConsumerLimitIdRequest) (*ConsumerLimitResponse, error)
	CreateConsumerLimit(context.Context, *ConsumerLimit) (*ConsumerLimitResponse, error)
	UpdateConsumerLimit(context.Context, *ConsumerLimit) (*ConsumerLimitResponse, error)
	DeleteConsumerLimit(context.Context, *ConsumerLimitIdRequest) (*ConsumerLimitResponse, error)
	mustEmbedUnimplementedConsumerLimitServiceServer()
}

// UnimplementedConsumerLimitServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerLimitServiceServer struct {
}

func (UnimplementedConsumerLimitServiceServer) GetAllConsumerLimits(context.Context, *emptypb.Empty) (*ConsumerLimitListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConsumerLimits not implemented")
}
func (UnimplementedConsumerLimitServiceServer) GetConsumerLimitById(context.Context, *ConsumerLimitIdRequest) (*ConsumerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerLimitById not implemented")
}
func (UnimplementedConsumerLimitServiceServer) CreateConsumerLimit(context.Context, *ConsumerLimit) (*ConsumerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumerLimit not implemented")
}
func (UnimplementedConsumerLimitServiceServer) UpdateConsumerLimit(context.Context, *ConsumerLimit) (*ConsumerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumerLimit not implemented")
}
func (UnimplementedConsumerLimitServiceServer) DeleteConsumerLimit(context.Context, *ConsumerLimitIdRequest) (*ConsumerLimitResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumerLimit not implemented")
}
func (UnimplementedConsumerLimitServiceServer) mustEmbedUnimplementedConsumerLimitServiceServer() {}

// UnsafeConsumerLimitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerLimitServiceServer will
// result in compilation errors.
type UnsafeConsumerLimitServiceServer interface {
	mustEmbedUnimplementedConsumerLimitServiceServer()
}

func RegisterConsumerLimitServiceServer(s grpc.ServiceRegistrar, srv ConsumerLimitServiceServer) {
	s.RegisterService(&ConsumerLimitService_ServiceDesc, srv)
}

func _ConsumerLimitService_GetAllConsumerLimits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerLimitServiceServer).GetAllConsumerLimits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerLimitService_GetAllConsumerLimits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerLimitServiceServer).GetAllConsumerLimits(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerLimitService_GetConsumerLimitById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerLimitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerLimitServiceServer).GetConsumerLimitById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerLimitService_GetConsumerLimitById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerLimitServiceServer).GetConsumerLimitById(ctx, req.(*ConsumerLimitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerLimitService_CreateConsumerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerLimitServiceServer).CreateConsumerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerLimitService_CreateConsumerLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerLimitServiceServer).CreateConsumerLimit(ctx, req.(*ConsumerLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerLimitService_UpdateConsumerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerLimit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerLimitServiceServer).UpdateConsumerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerLimitService_UpdateConsumerLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerLimitServiceServer).UpdateConsumerLimit(ctx, req.(*ConsumerLimit))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerLimitService_DeleteConsumerLimit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerLimitIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerLimitServiceServer).DeleteConsumerLimit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerLimitService_DeleteConsumerLimit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerLimitServiceServer).DeleteConsumerLimit(ctx, req.(*ConsumerLimitIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerLimitService_ServiceDesc is the grpc.ServiceDesc for ConsumerLimitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerLimitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xyz_grpc.ConsumerLimitService",
	HandlerType: (*ConsumerLimitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllConsumerLimits",
			Handler:    _ConsumerLimitService_GetAllConsumerLimits_Handler,
		},
		{
			MethodName: "GetConsumerLimitById",
			Handler:    _ConsumerLimitService_GetConsumerLimitById_Handler,
		},
		{
			MethodName: "CreateConsumerLimit",
			Handler:    _ConsumerLimitService_CreateConsumerLimit_Handler,
		},
		{
			MethodName: "UpdateConsumerLimit",
			Handler:    _ConsumerLimitService_UpdateConsumerLimit_Handler,
		},
		{
			MethodName: "DeleteConsumerLimit",
			Handler:    _ConsumerLimitService_DeleteConsumerLimit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consumer_limit.proto",
}
