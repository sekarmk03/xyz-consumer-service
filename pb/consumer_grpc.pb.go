// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: consumer.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ConsumerService_GetAllConsumers_FullMethodName = "/xyz_grpc.ConsumerService/GetAllConsumers"
	ConsumerService_GetConsumerById_FullMethodName = "/xyz_grpc.ConsumerService/GetConsumerById"
	ConsumerService_CreateConsumer_FullMethodName  = "/xyz_grpc.ConsumerService/CreateConsumer"
	ConsumerService_UpdateConsumer_FullMethodName  = "/xyz_grpc.ConsumerService/UpdateConsumer"
	ConsumerService_DeleteConsumer_FullMethodName  = "/xyz_grpc.ConsumerService/DeleteConsumer"
)

// ConsumerServiceClient is the client API for ConsumerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConsumerServiceClient interface {
	GetAllConsumers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConsumerListResponse, error)
	GetConsumerById(ctx context.Context, in *ConsumerIdRequest, opts ...grpc.CallOption) (*ConsumerResponse, error)
	CreateConsumer(ctx context.Context, in *ConsumerCreateRequest, opts ...grpc.CallOption) (*ConsumerResponse, error)
	UpdateConsumer(ctx context.Context, in *Consumer, opts ...grpc.CallOption) (*ConsumerResponse, error)
	DeleteConsumer(ctx context.Context, in *ConsumerIdRequest, opts ...grpc.CallOption) (*NoDataResponse, error)
}

type consumerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConsumerServiceClient(cc grpc.ClientConnInterface) ConsumerServiceClient {
	return &consumerServiceClient{cc}
}

func (c *consumerServiceClient) GetAllConsumers(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ConsumerListResponse, error) {
	out := new(ConsumerListResponse)
	err := c.cc.Invoke(ctx, ConsumerService_GetAllConsumers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) GetConsumerById(ctx context.Context, in *ConsumerIdRequest, opts ...grpc.CallOption) (*ConsumerResponse, error) {
	out := new(ConsumerResponse)
	err := c.cc.Invoke(ctx, ConsumerService_GetConsumerById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) CreateConsumer(ctx context.Context, in *ConsumerCreateRequest, opts ...grpc.CallOption) (*ConsumerResponse, error) {
	out := new(ConsumerResponse)
	err := c.cc.Invoke(ctx, ConsumerService_CreateConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) UpdateConsumer(ctx context.Context, in *Consumer, opts ...grpc.CallOption) (*ConsumerResponse, error) {
	out := new(ConsumerResponse)
	err := c.cc.Invoke(ctx, ConsumerService_UpdateConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *consumerServiceClient) DeleteConsumer(ctx context.Context, in *ConsumerIdRequest, opts ...grpc.CallOption) (*NoDataResponse, error) {
	out := new(NoDataResponse)
	err := c.cc.Invoke(ctx, ConsumerService_DeleteConsumer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConsumerServiceServer is the server API for ConsumerService service.
// All implementations must embed UnimplementedConsumerServiceServer
// for forward compatibility
type ConsumerServiceServer interface {
	GetAllConsumers(context.Context, *emptypb.Empty) (*ConsumerListResponse, error)
	GetConsumerById(context.Context, *ConsumerIdRequest) (*ConsumerResponse, error)
	CreateConsumer(context.Context, *ConsumerCreateRequest) (*ConsumerResponse, error)
	UpdateConsumer(context.Context, *Consumer) (*ConsumerResponse, error)
	DeleteConsumer(context.Context, *ConsumerIdRequest) (*NoDataResponse, error)
	mustEmbedUnimplementedConsumerServiceServer()
}

// UnimplementedConsumerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedConsumerServiceServer struct {
}

func (UnimplementedConsumerServiceServer) GetAllConsumers(context.Context, *emptypb.Empty) (*ConsumerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllConsumers not implemented")
}
func (UnimplementedConsumerServiceServer) GetConsumerById(context.Context, *ConsumerIdRequest) (*ConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConsumerById not implemented")
}
func (UnimplementedConsumerServiceServer) CreateConsumer(context.Context, *ConsumerCreateRequest) (*ConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConsumer not implemented")
}
func (UnimplementedConsumerServiceServer) UpdateConsumer(context.Context, *Consumer) (*ConsumerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateConsumer not implemented")
}
func (UnimplementedConsumerServiceServer) DeleteConsumer(context.Context, *ConsumerIdRequest) (*NoDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConsumer not implemented")
}
func (UnimplementedConsumerServiceServer) mustEmbedUnimplementedConsumerServiceServer() {}

// UnsafeConsumerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConsumerServiceServer will
// result in compilation errors.
type UnsafeConsumerServiceServer interface {
	mustEmbedUnimplementedConsumerServiceServer()
}

func RegisterConsumerServiceServer(s grpc.ServiceRegistrar, srv ConsumerServiceServer) {
	s.RegisterService(&ConsumerService_ServiceDesc, srv)
}

func _ConsumerService_GetAllConsumers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).GetAllConsumers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_GetAllConsumers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).GetAllConsumers(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_GetConsumerById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).GetConsumerById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_GetConsumerById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).GetConsumerById(ctx, req.(*ConsumerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_CreateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).CreateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_CreateConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).CreateConsumer(ctx, req.(*ConsumerCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_UpdateConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consumer)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).UpdateConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_UpdateConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).UpdateConsumer(ctx, req.(*Consumer))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConsumerService_DeleteConsumer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConsumerIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConsumerServiceServer).DeleteConsumer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConsumerService_DeleteConsumer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConsumerServiceServer).DeleteConsumer(ctx, req.(*ConsumerIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConsumerService_ServiceDesc is the grpc.ServiceDesc for ConsumerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConsumerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "xyz_grpc.ConsumerService",
	HandlerType: (*ConsumerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAllConsumers",
			Handler:    _ConsumerService_GetAllConsumers_Handler,
		},
		{
			MethodName: "GetConsumerById",
			Handler:    _ConsumerService_GetConsumerById_Handler,
		},
		{
			MethodName: "CreateConsumer",
			Handler:    _ConsumerService_CreateConsumer_Handler,
		},
		{
			MethodName: "UpdateConsumer",
			Handler:    _ConsumerService_UpdateConsumer_Handler,
		},
		{
			MethodName: "DeleteConsumer",
			Handler:    _ConsumerService_DeleteConsumer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "consumer.proto",
}
